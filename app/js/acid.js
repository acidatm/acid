function ACID(storage,ipc,canvas){
  this.storage = storage
  this.ipc = ipc
  this.config = {}
  this.seed = 0
  this.canvas = canvas
  this.initiated = false
  this.canvasCapturerer = {
    requestGifFrame: function(delay){
      if(this.canvasCapturerer.addFrames){
        this.canvasCapturerer.gif.addFrame(this.canvas, {delay: delay});
      }
    }.bind(this)
  }
  this.export = function(fileType,capture){
    if(capture){
      switch(fileType){
        case "webm":
          if(this.canvasCapturerer.recorder){
            this.canvasCapturerer.recorder.stop()
            this.toggleRecorderUI(false)
            this.toggleExporterUI(true)
            this.canvasCapturerer.recorder.save(this.getExportFilename("webm"))
            this.toggleExporterUI(false)
            this.config.fileCount = this.config.fileCount + 1
            this.save()
            this.canvasCapturerer.recorder = false
            this.exporting = false
          }
          break
        case "gif":
          this.canvasCapturerer.addFrames = false
          this.toggleRecorderUI(false)
          this.toggleExporterUI(true)
          this.canvasCapturerer.gif.on('finished', function(blob) {
            this.download(blob,this.getExportFilename("gif"),true)
            this.canvasCapturerer.gif = false
            this.toggleExporterUI(false)
          }.bind(this));
          this.canvasCapturerer.gif.render();

          break;
      }
    }
    else if(!this.exporting){
      this.exporting = true
      switch(fileType){
        case "jpg":
          this.canvas.toBlob(function(blob) {
            this.download(blob,this.getExportFilename("jpg"),true)
          }.bind(this),'image/jpeg', 0.95)
          break
        case "png":
          this.canvas.toBlob(function(blob) {
            this.download(blob,this.getExportFilename("png"),true)
          }.bind(this),'image/png')
          break
        case "webm":
          this.toggleRecorderUI(true)
          this.canvasCapturerer.recorder = new CanvasRecorder(this.canvas)
          this.canvasCapturerer.recorder.start()
          break
        case "gif":
          this.toggleRecorderUI(true)
          this.canvasCapturerer.gif = new GIF({
            workers: 2,
            quality: 10,
            workerScript: "./js/gif.worker.js"
          });
          this.canvasCapturerer.addFrames = true
          break

      }
    }
  }
  this.getExportFilename = function(type){
    // return this.config.fileCount.toString().padStart(8, '0') + "." + type;
    return "acid." + type;
  }
  this.download = function(blob,name,isexport){
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = name;
    document.body.appendChild(a);
    a.click();
    if(isexport){
      this.exporting = false
      this.config.fileCount = this.config.fileCount + 1
      this.save()
    }
    setTimeout(() => {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    }, 100);
  }
  this.store = function(){
    let blob = new Blob([JSON.stringify(this.config)], {type: 'text/plain'});
    this.download(blob,"config.txt",false)
  }
  this.save = function(){
    this.storage.set("config", JSON.stringify(this.config), function(error) {
      if (error){
        throw error
      }
      else{
        this.ipc.send("requestUpdate","");
      }
    }.bind(this));
  }
  this.exporting = false
  this.t = 0
  this.dynamics = {
    t: 0,
    d: 0
  }
  this.reseed = function(){
    this.seed = Math.random() * 1000
    noise.seed(Math.random() * 1000)
  }
  this.toggleRecorderUI = function(flag){
    if(flag){
      document.body.classList.add("recorder-active")
    }
    else {
      document.body.classList.remove("recorder-active")
    }
  }
  this.toggleExporterUI = function(flag){
    if(flag){
      document.body.classList.add("export-active")
    }
    else {
      document.body.classList.remove("export-active")
    }
  }
  this.createRender = function(){
    new ACIDRENDER(this.storage,this.ipc,this.canvas,this)
  }
  this.fx = {
    exp: function(n,i){
      return Math.pow(n,1 + i)
    }.bind(this),
    cmp: function(n,i){
      return Math.pow(n,1 - i)
    }.bind(this),
    bit: function(n,i){
      return Math.floor(n * (Math.pow(1 - i,2) * 765)) / (Math.pow(1 - i,2) * 765)
    }.bind(this),
    rnd: function(n,i){
      return Math.max(0,Math.min(1,(n + (-i + (Math.random() * i * 2)))))
    }.bind(this),
    drv: function(n,i){
      return Math.min(1,Math.pow((1 + n),((1 + i))) - 1)
    }.bind(this)
  }
  this.rotationWavetable = [[0,1],[0.01568627450980392,0.9843137254901961],[0.03137254901960784,0.9686274509803922],[0.047058823529411764,0.9529411764705882],[0.06274509803921569,0.9372549019607843],[0.0784313725490196,0.9215686274509804],[0.09411764705882353,0.9058823529411765],[0.10980392156862745,0.8901960784313725],[0.12549019607843137,0.8745098039215686],[0.1411764705882353,0.8588235294117648],[0.1568627450980392,0.8431372549019608],[0.17254901960784313,0.8274509803921568],[0.18823529411764706,0.8117647058823529],[0.20392156862745098,0.7960784313725491],[0.2196078431372549,0.7803921568627451],[0.23529411764705882,0.7647058823529411],[0.25098039215686274,0.7490196078431373],[0.26666666666666666,0.7333333333333334],[0.2823529411764706,0.7176470588235294],[0.2980392156862745,0.7019607843137254],[0.3137254901960784,0.6862745098039216],[0.32941176470588235,0.6705882352941177],[0.34509803921568627,0.6549019607843137],[0.3607843137254902,0.6392156862745098],[0.3764705882352941,0.6235294117647059],[0.39215686274509803,0.607843137254902],[0.40784313725490196,0.592156862745098],[0.4235294117647059,0.5764705882352941],[0.4392156862745098,0.5607843137254902],[0.4549019607843137,0.5450980392156863],[0.47058823529411764,0.5294117647058824],[0.48627450980392156,0.5137254901960784],[0.5019607843137255,0.4980392156862745],[0.5176470588235295,0.48235294117647054],[0.5333333333333333,0.4666666666666667],[0.5490196078431373,0.4509803921568627],[0.5647058823529412,0.43529411764705883],[0.5803921568627451,0.41960784313725485],[0.596078431372549,0.403921568627451],[0.611764705882353,0.388235294117647],[0.6274509803921569,0.37254901960784315],[0.6431372549019608,0.35686274509803917],[0.6588235294117647,0.3411764705882353],[0.6745098039215687,0.3254901960784313],[0.6901960784313725,0.30980392156862746],[0.7058823529411765,0.2941176470588235],[0.7215686274509804,0.2784313725490196],[0.7372549019607844,0.26274509803921564],[0.7529411764705882,0.24705882352941178],[0.7686274509803922,0.2313725490196078],[0.7843137254901961,0.21568627450980393],[0.8,0.19999999999999996],[0.8156862745098039,0.1843137254901961],[0.8313725490196079,0.1686274509803921],[0.8470588235294118,0.15294117647058825],[0.8627450980392157,0.13725490196078427],[0.8784313725490196,0.1215686274509804],[0.8941176470588236,0.10588235294117643],[0.9098039215686274,0.09019607843137256],[0.9254901960784314,0.07450980392156858],[0.9411764705882353,0.05882352941176472],[0.9568627450980393,0.04313725490196074],[0.9725490196078431,0.027450980392156876],[0.9882352941176471,0.0117647058823529],[0.996078431372549,-0.0039215686274509665],[0.9803921568627452,-0.019607843137254832],[0.9647058823529411,-0.03529411764705892],[0.9490196078431372,-0.050980392156862786],[0.9333333333333333,-0.06666666666666665],[0.9176470588235295,-0.08235294117647052],[0.9019607843137254,-0.0980392156862746],[0.8862745098039215,-0.11372549019607847],[0.8705882352941177,-0.12941176470588234],[0.8549019607843138,-0.1450980392156862],[0.8392156862745097,-0.1607843137254903],[0.8235294117647058,-0.17647058823529416],[0.807843137254902,-0.19215686274509802],[0.7921568627450981,-0.2078431372549019],[0.776470588235294,-0.22352941176470598],[0.7607843137254902,-0.23921568627450984],[0.7450980392156863,-0.2549019607843137],[0.7294117647058824,-0.2705882352941176],[0.7137254901960783,-0.28627450980392166],[0.6980392156862745,-0.3019607843137255],[0.6823529411764706,-0.3176470588235294],[0.6666666666666667,-0.33333333333333326],[0.6509803921568627,-0.34901960784313735],[0.6352941176470588,-0.3647058823529412],[0.6196078431372549,-0.3803921568627451],[0.603921568627451,-0.39607843137254894],[0.588235294117647,-0.41176470588235303],[0.5725490196078431,-0.4274509803921569],[0.5568627450980392,-0.44313725490196076],[0.5411764705882354,-0.45882352941176463],[0.5254901960784313,-0.4745098039215687],[0.5098039215686274,-0.4901960784313726],[0.49411764705882355,-0.5058823529411764],[0.4784313725490197,-0.5215686274509803],[0.4627450980392156,-0.5372549019607844],[0.44705882352941173,-0.5529411764705883],[0.43137254901960786,-0.5686274509803921],[0.415686274509804,-0.584313725490196],[0.3999999999999999,-0.6000000000000001],[0.38431372549019605,-0.615686274509804],[0.3686274509803922,-0.6313725490196078],[0.3529411764705883,-0.6470588235294117],[0.3372549019607842,-0.6627450980392158],[0.32156862745098036,-0.6784313725490196],[0.3058823529411765,-0.6941176470588235],[0.29019607843137263,-0.7098039215686274],[0.27450980392156854,-0.7254901960784315],[0.2588235294117647,-0.7411764705882353],[0.2431372549019608,-0.7568627450980392],[0.22745098039215694,-0.7725490196078431],[0.21176470588235285,-0.7882352941176471],[0.196078431372549,-0.803921568627451],[0.18039215686274512,-0.8196078431372549],[0.16470588235294126,-0.8352941176470587],[0.14901960784313717,-0.8509803921568628],[0.1333333333333333,-0.8666666666666667],[0.11764705882352944,-0.8823529411764706],[0.10196078431372557,-0.8980392156862744],[0.08627450980392148,-0.9137254901960785],[0.07058823529411762,-0.9294117647058824],[0.05490196078431375,-0.9450980392156862],[0.03921568627450989,-0.9607843137254901],[0.0235294117647058,-0.9764705882352942],[0.007843137254901933,-0.9921568627450981],[-0.007843137254901933,-0.9921568627450981],[-0.0235294117647058,-0.9764705882352942],[-0.039215686274509665,-0.9607843137254903],[-0.05490196078431353,-0.9450980392156865],[-0.07058823529411784,-0.9294117647058822],[-0.0862745098039217,-0.9137254901960783],[-0.10196078431372557,-0.8980392156862744],[-0.11764705882352944,-0.8823529411764706],[-0.1333333333333333,-0.8666666666666667],[-0.14901960784313717,-0.8509803921568628],[-0.16470588235294104,-0.835294117647059],[-0.1803921568627449,-0.8196078431372551],[-0.1960784313725492,-0.8039215686274508],[-0.21176470588235308,-0.7882352941176469],[-0.22745098039215694,-0.7725490196078431],[-0.2431372549019608,-0.7568627450980392],[-0.2588235294117647,-0.7411764705882353],[-0.27450980392156854,-0.7254901960784315],[-0.2901960784313724,-0.7098039215686276],[-0.30588235294117627,-0.6941176470588237],[-0.3215686274509806,-0.6784313725490194],[-0.33725490196078445,-0.6627450980392156],[-0.3529411764705883,-0.6470588235294117],[-0.3686274509803922,-0.6313725490196078],[-0.38431372549019605,-0.615686274509804],[-0.3999999999999999,-0.6000000000000001],[-0.4156862745098038,-0.5843137254901962],[-0.43137254901960764,-0.5686274509803924],[-0.44705882352941195,-0.552941176470588],[-0.4627450980392158,-0.5372549019607842],[-0.4784313725490197,-0.5215686274509803],[-0.49411764705882355,-0.5058823529411764],[-0.5098039215686274,-0.4901960784313726],[-0.5254901960784313,-0.4745098039215687],[-0.5411764705882351,-0.45882352941176485],[-0.556862745098039,-0.443137254901961],[-0.5725490196078433,-0.4274509803921567],[-0.5882352941176472,-0.4117647058823528],[-0.603921568627451,-0.39607843137254894],[-0.6196078431372549,-0.3803921568627451],[-0.6352941176470588,-0.3647058823529412],[-0.6509803921568627,-0.34901960784313735],[-0.6666666666666665,-0.3333333333333335],[-0.6823529411764704,-0.3176470588235296],[-0.6980392156862747,-0.3019607843137253],[-0.7137254901960786,-0.28627450980392144],[-0.7294117647058824,-0.2705882352941176],[-0.7450980392156863,-0.2549019607843137],[-0.7607843137254902,-0.23921568627450984],[-0.776470588235294,-0.22352941176470598],[-0.7921568627450979,-0.2078431372549021],[-0.8078431372549018,-0.19215686274509824],[-0.8235294117647061,-0.17647058823529393],[-0.8392156862745099,-0.16078431372549007],[-0.8549019607843138,-0.1450980392156862],[-0.8705882352941177,-0.12941176470588234],[-0.8862745098039215,-0.11372549019607847],[-0.9019607843137254,-0.0980392156862746],[-0.9176470588235293,-0.08235294117647074],[-0.9333333333333331,-0.06666666666666687],[-0.9490196078431374,-0.050980392156862564],[-0.9647058823529413,-0.0352941176470587],[-0.9803921568627452,-0.019607843137254832],[-0.996078431372549,-0.0039215686274509665],[-0.9882352941176471,0.0117647058823529],[-0.9725490196078432,0.027450980392156765],[-0.9568627450980394,0.04313725490196063],[-0.9411764705882355,0.0588235294117645],[-0.9254901960784312,0.0745098039215688],[-0.9098039215686273,0.09019607843137267],[-0.8941176470588235,0.10588235294117654],[-0.8784313725490196,0.1215686274509804],[-0.8627450980392157,0.13725490196078427],[-0.8470588235294119,0.15294117647058814],[-0.831372549019608,0.168627450980392],[-0.8156862745098041,0.18431372549019587],[-0.7999999999999998,0.20000000000000018],[-0.784313725490196,0.21568627450980404],[-0.7686274509803921,0.2313725490196079],[-0.7529411764705882,0.24705882352941178],[-0.7372549019607844,0.26274509803921564],[-0.7215686274509805,0.2784313725490195],[-0.7058823529411766,0.2941176470588234],[-0.6901960784313728,0.30980392156862724],[-0.6745098039215685,0.32549019607843155],[-0.6588235294117646,0.3411764705882354],[-0.6431372549019607,0.3568627450980393],[-0.6274509803921569,0.37254901960784315],[-0.611764705882353,0.388235294117647],[-0.5960784313725491,0.4039215686274509],[-0.5803921568627453,0.41960784313725474],[-0.5647058823529414,0.4352941176470586],[-0.5490196078431371,0.4509803921568629],[-0.5333333333333332,0.4666666666666668],[-0.5176470588235293,0.48235294117647065],[-0.5019607843137255,0.4980392156862745],[-0.4862745098039216,0.5137254901960784],[-0.47058823529411775,0.5294117647058822],[-0.4549019607843139,0.5450980392156861],[-0.43921568627451,0.56078431372549],[-0.4235294117647057,0.5764705882352943],[-0.40784313725490184,0.5921568627450982],[-0.392156862745098,0.607843137254902],[-0.3764705882352941,0.6235294117647059],[-0.36078431372549025,0.6392156862745098],[-0.3450980392156864,0.6549019607843136],[-0.3294117647058825,0.6705882352941175],[-0.31372549019607865,0.6862745098039214],[-0.29803921568627434,0.7019607843137257],[-0.2823529411764705,0.7176470588235295],[-0.2666666666666666,0.7333333333333334],[-0.25098039215686274,0.7490196078431373],[-0.23529411764705888,0.7647058823529411],[-0.219607843137255,0.780392156862745],[-0.20392156862745114,0.7960784313725489],[-0.18823529411764728,0.8117647058823527],[-0.17254901960784297,0.827450980392157],[-0.1568627450980391,0.8431372549019609],[-0.14117647058823524,0.8588235294117648],[-0.12549019607843137,0.8745098039215686],[-0.1098039215686275,0.8901960784313725],[-0.09411764705882364,0.9058823529411764],[-0.07843137254901977,0.9215686274509802],[-0.06274509803921591,0.9372549019607841],[-0.0470588235294116,0.9529411764705884],[-0.03137254901960773,0.9686274509803923],[-0.015686274509803866,0.9843137254901961],[0,1]]
  this.get = function(x,y,z,t){
    let n = [0,0,0]
    let _n = 0
    for(let i = 0; i < 5; i++){
      let osc = this.config.osc[i]
      if(osc.run && osc.type != "off"){
        /*processing the oscilator*/
        switch(osc.typ){
          case "prl":
            _n = (noise.perlin3(
              ((x + (t * (0.4994994994994995 - osc.config.x.off) * 1000)) * osc.config.x.frq * 0.1),
              ((y + (t * (0.4994994994994995 - osc.config.y.off) * 1000)) * osc.config.y.frq * 0.1),
              ((z + (t * (0.4994994994994995 - osc.config.z.off) * 1000)) * osc.config.z.frq * 0.1)
            ) + 1) * 0.5
            break
          case "plx":
            _n = (noise.simplex3(
              ((x + (t * (0.4994994994994995 - osc.config.x.off) * 1000)) * osc.config.x.frq * 0.1),
              ((y + (t * (0.4994994994994995 - osc.config.y.off) * 1000)) * osc.config.y.frq * 0.1),
              ((z + (t * (0.4994994994994995 - osc.config.z.off) * 1000)) * osc.config.z.frq * 0.1)
            ) + 1) * 0.5
            break
            default:
              let v = (
                (
                  this.rotationWavetable[Math.round((1 - osc.config.z.mod) * 255)][0] * x +
                  this.rotationWavetable[Math.round((1 - osc.config.z.mod) * 255)][1] * y
                ) *
                osc.config.z.frq * 0.1 +
                (
                  t * osc.config.z.len * 10
                ) +
                osc.config.z.off
              ) % 1
              switch(osc.typ){
                case "saw":
                  _n = v
                  break
                case "rmp":
                  _n = 1 - v
                  break
                case "sqr":
                  _n = v < 0.5 ? 1 : 0
                  break
                case "pwm":
                  _n = v < osc.config.z.cen ? 1 : 0
                  break
                case "tri":
                  _n = v < 0.5 ? v * 2 : 1 - ((v - 0.5) * 2)
                  break
                case "sin":
                  let tri = v < 0.5 ? v * 2 : 1 - ((v - 0.5) * 2)
                  _n = (1 + Math.sin((1.5 + tri) * Math.PI)) * 0.5
                  break
                case "osc":
                    /*Shape*/
                    let center = osc.config.z.cen
                    let shape = osc.config.z.shp
                    let t
                    if((v % 1) < center){
                      t = (v % 1) * 1 / center
                    }
                    else{
                      t = 1 - (((v % 1) - center) * (1 / (1 - center)))
                    }
                    let sin = ((1 + Math.sin((1.5 + t) * Math.PI)) * 0.5)
                    let sqr = t < center ? 0 : 1
                    if(shape <= 0.5){
                      _n = t * ((0.5 - shape) * 2) + sin * (shape * 2)
                    }
                    else{
                      _n = sin * (2 - shape * 2) + sqr * ((shape - 0.5) * 2)
                    }
                    break
              }
        }
        /*applying all fx in effects chain*/
        if(this.config.render.optimization.effects == "on"){
          for(let f in osc.fx.c){
            let fx = osc.fx.c[f]
            _n = this.fx[fx](_n,osc.fx[fx])
          }
        }

        /*scaling and final amplification*/
        _n = (osc.min + ((osc.max - osc.min) * _n))
        if(_n >= (osc.filter.hpf * (osc.max - osc.min)) + osc.min && _n <= osc.min + (1 - osc.filter.lpf) * (osc.max - osc.min) ){
          // _n *= osc.amp
          switch(osc.mix){
            case "add":
              n[0] += _n * osc.channels.r
              n[1] += _n * osc.channels.g
              n[2] += _n * osc.channels.b
              break
            case "sub":
              n[0] -= _n * osc.channels.r
              n[1] -= _n * osc.channels.g
              n[2] -= _n * osc.channels.b
              break
            case "mlt":
              n[0] *= _n * osc.channels.r
              n[1] *= _n * osc.channels.g
              n[2] *= _n * osc.channels.b
              break
            case "div":
              n[0] /= _n * osc.channels.r
              n[1] /= _n * osc.channels.g
              n[2] /= _n * osc.channels.b
              break
          }
        }
      }
    }
    /*Different amp behaviors for clipping values*/
    switch(this.config.typ){
      /*Simply clips of the signal*/
      case "clp":
        n[0] = Math.max(0,Math.min(1,n[0]))
        n[1] = Math.max(0,Math.min(1,n[1]))
        n[2] = Math.max(0,Math.min(1,n[2]))
        break
      /*Uses mod on the signal, turning a signal of 1.1 to 0.1*/
      case "mod":
        n[0] = n[0] % 1
        n[1] = n[1] % 1
        n[2] = n[2] % 1
        break
      /*Dynamically determines maximum amplitude over time and scales all signals accordingly*/
      case "dyn":
        if(n[0] > this.dynamics.d){
          this.dynamics.d = n[0]
        }
        if(n[1] > this.dynamics.d){
          this.dynamics.d = n[1]
        }
        if(n[2] > this.dynamics.d){
          this.dynamics.d = n[2]
        }
        n[0] = n[0] / this.dynamics.d
        n[1] = n[1] / this.dynamics.d
        n[2] = n[2] / this.dynamics.d
        if(t != this.dynamics.t){
          this.dynamics.t = t
          this.dynamics.d = 0
        }
        break
    }
    return n
  }
  this.update = function(callback){
    this.storage.get("config", function(error, data) {
      if(error){
        throw error
      }
      else if(isNotEmptyObject(data)){
        this.config = JSON.parse(data)
        if(!this.initiated){
          this.createRender()
          this.initiated = true
        }
      }
    }.bind(this));
  }
  this.init = function(){
    this.reseed()
    this.ipc.on("requireUpdate", function () {
      this.update()
    }.bind(this));
    this.ipc.on("requireSave", function () {
      this.store()
    }.bind(this));
    this.ipc.on("requireReseed", function () {
      this.reseed()
    }.bind(this));
    this.ipc.on("requirePNG", function () {
      this.export("png")
    }.bind(this));
    this.ipc.on("requireJPG", function () {
      this.export("jpg")
    }.bind(this));
    this.ipc.on("requireWEBMStart", function () {
      this.export("webm",false)
    }.bind(this));
    this.ipc.on("requireWEBMStop", function () {
      this.export("webm",true)
    }.bind(this));
    this.ipc.on("requireGIFStart", function () {
      this.export("gif",false)
    }.bind(this));
    this.ipc.on("requireGIFStop", function () {
      this.export("gif",true)
    }.bind(this));
    this.update()
  }
  this.init()
}
